头文件部分：

contact.h
#ifndef __CONTACT_H__
#define __CONTACT_H__
#include<stdio.h>
#include<windows.h>
#include<stdlib.h>
#include<string.h>
#pragma warning(disable:4996)
#define USER "dongjin"
#define PASSWD "12345"
#define NAME_SIZE 32
#define SEX_SIZE 16
#define TELPHONE_SIZE 32
#define ADDRESS_SIZE 32
#define NUM 1
typedef struct person//定义一个联系人所有信息的结构体
{
	char name[NAME_SIZE];
	char sex[SEX_SIZE];
	int age;
	char telphone[TELPHONE_SIZE];
	char address[ADDRESS_SIZE];
}person_t, * person_p;
typedef struct contact//通讯录的结构体
{
	int count;//通讯录能容纳总人数
	int size;//通讯录当前已有人数
	person_t person[0];//定义的柔性数组
}contact_t, * contact_p;
int color(int num);//颜色函数
void Menu();//菜单
void InitContact(contact_p* cp);//通讯录初始化
int AddPersonToContact(contact_p* cp);//添加联系人
int DelPersonToContact(contact_p cp);//删除联系人
void ShowPersonFromContact(contact_p cp);//显示联系人
int CheckPersonFromContact(contact_p cp);//查找联系人
int ChangePersonFromContact(contact_p cp);//修改联系人
int EmptyPersonFromContact(contact_p cp);//清空联系人
int SortPersonFromContact(contact_p cp);//排序联系人
int SaveContact(contact_p cp);
#endif __CONTACT_H__
#pragma once





————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————





主要函数部分：
#include"contact.h"
int color(int num)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), num);
	return 0;
}
void Menu()
{
	color(6);
	printf("****************************************************************\n");
	color(2);
	printf("                                                                \n");
	printf("****   1、添加联系人     2、删除联系人      3、修改联系人   ****\n");
	color(7);
	printf("                                                                \n");
	printf("****   4、查找联系人     5、显示联系人      6、清空联系人   ****\n");
	color(5);
	printf("                                                                \n");
	printf("****   7、排序联系人     8、保存联系人      9、退出         ****\n");
	color(6);
	printf("                                                                \n");
	printf("****************************************************************\n");
}
void InitContact(contact_p* cp)
{
	FILE* fp = fopen("SAVE_FILE", "rb");//读取
	if (fp == NULL)
	{
		*cp = (contact_p)malloc(sizeof(contact_t) + sizeof(person_t) * NUM);//
		if (*cp == NULL)
		{
			printf("申请空间失败!!!\n");
			exit(1);
		}
		(*cp)->count = NUM;//目前通讯录可容纳NUM个人
		(*cp)->size = 0;//目前通讯录有0个人
		printf("初始化成功，使用默认方案!!!\n");
		return;
	}
	contact_t ct;
	fread(&ct, sizeof(contact_t), 1, fp);
	*cp = (contact_p)malloc(sizeof(contact_t) + sizeof(person_t) * (ct.count));
	if (*cp == NULL)
	{
		printf("申请空间失败!!!\n");
		exit(1);
	}
	memcpy(*cp, &ct, sizeof(ct));
	fread((*cp)->person, sizeof(person_t), ct.size, fp);
	printf("初始化成功，使用文件方案!!!\n");
	fclose(fp);
}
static int IsFull(contact_p cp)
{
	return cp->size < cp->count ? 0 : 1;
}
static int IsEmpty(contact_p cp)
{
	return cp->size == 0;
}
static int InAdd(contact_p* cp)
{
	printf("空间不够，准备开始扩大空间,原空间大小为%d!!!\n", (*cp)->count);
	int new_size = (*cp)->count * 2;//每次扩容大小为原来的2倍
	contact_p new_contact = realloc(*cp, sizeof(contact_t) + sizeof(person_t) * new_size);
	if (new_contact == NULL)
	{
		printf("重新扩大空间失败!!!\n");
		return 0;
	}
	new_contact->count = new_size;
	*cp = new_contact;
	printf("重新扩大空间成功,扩大后空间为%d!!!\n", (*cp)->count);
	return 1;
}
int AddPersonToContact(contact_p* cp)
{
	if (IsFull(*cp) && !InAdd(cp))//空间满了且开始扩容，扩容失败则执行if里面语句
	{
		printf("空间满了，且扩容失败!!!\n");
		return -1;
	}
	person_p p = &((*cp)->person[(*cp)->size]);
	printf("请输入联系人姓名#:");
	scanf("%s", p->name);
	printf("请输入联系人性别#:");
	scanf("%s", p->sex);
	printf("请输入联系人年龄#:");
	scanf("%d", &(p->age));
	printf("请输入联系人电话号码#:");
	scanf("%s", p->telphone);
	printf("请输入联系人住址#:");
	scanf("%s", p->address);
	(*cp)->size += 1;
	return 0;
}
void ShowPersonFromContact(contact_p cp)
{
	printf(" 姓名  性别   年龄   电话号码    住址\n");
	int i = 0;
	for (i = 0; i < cp->size; i++)
	{
		person_p p = &(cp->person[i]);
		printf("--------------------------------------\n");
		printf("| %s | %s | %d | %s | %s |\n", p->name, p->sex, p->age, p->telphone, p->address);
		printf("--------------------------------------");
		printf("\n");
	}
}
int CheckPersonFromContact(contact_p cp)
{
	char name[NAME_SIZE];
	printf("请输入你想查询的联系人的姓名#:");
	scanf("%s", name);
	int i = 0;
	for (i = 0; i < cp->size; i++)
	{
		person_p p = &(cp->person[i]);
		if (strcmp(p->name, name) == 0)
		{
			printf("--------------------------------------\n");
			printf("| %s | %s | %d | %s | %s |\n", p->name, p->sex, p->age, p->telphone, p->address);
			printf("--------------------------------------");
			printf("\n");
		}
	}
	return 0;
}
int ChangePersonFromContact(contact_p cp)
{
	char name[NAME_SIZE];
	char sex[SEX_SIZE];
	int age;
	char telphone[TELPHONE_SIZE];
	char address[ADDRESS_SIZE];
	printf("请输入你想修改的联系人的姓名#:");
	scanf("%s", name);
	int i = 0;
	int n = 0;
	int quit = 0;
	for (i = 0; i < cp->size; i++)
	{
		person_p p = &(cp->person[i]);
		if (strcmp(p->name, name) == 0)
		{
			while (!quit)
			{
				printf("请输入你想修改的联系人%s的内容#: 1、姓名 2、性别 3、年龄 4、电话号码 5、住址 6、退出修改\n", p->name);
				scanf("%d", &n);
				switch (n)
				{
				case 1:
					printf("请输入你想修改的名字#:");
					scanf("%s", &name);
					strcpy(p->name, name);
					break;
				case 2:
					printf("请输入你想修改的性别#:");
					scanf("%s", &sex);
					strcpy(p->sex, sex);
					break;
				case 3:
					printf("请输入你想修改的年龄#:");
					scanf("%d", &age);
					p->age = age;
					break;
				case 4:
					printf("请输入你想修改的电话号码#:");
					scanf("%s", &telphone);
					strcpy(p->telphone, telphone);
					break;
				case 5:
					printf("请输入你想修改的住址#:");
					scanf("%s", &address);
					strcpy(p->address, address);
					break;
				case 6:
					quit = 1;
					break;
				}
			}
		}
	}
	return 0;
}
int EmptyPersonFromContact(contact_p cp)
{
	cp->size = 0;
	return 0;
}
int DelPersonToContact(contact_p cp)
{
	if (IsEmpty(cp))
	{
		printf("当前通讯录为空,不能删除!!!\n");
		return 0;
	}
	char name[NAME_SIZE];
	printf("请输入你想删除的联系人的姓名#:");
	scanf("%s", name);
	int i = 0;
	for (i = 0; i < cp->size; i++)
	{
		person_p p = &(cp->person[i]);
		if (strcmp(p->name, name) == 0)
		{
			memcpy(p, &(cp->person[cp->size - 1]), sizeof(person_t));
			break;
		}
	}
	cp->size -= 1;
	return 0;
}
static int CompName(const void* x, const void* y)
{
	person_p xp = (person_p)x;
	person_p yp = (person_p)y;
	return strcmp(xp->name, yp->name);
}
int SortPersonFromContact(contact_p cp)
{
	if (IsEmpty(cp))
	{
		printf("当前通讯录为空，不能排序!!!\n");
		return 0;
	}
	qsort(cp->person, cp->size, sizeof(person_t), CompName);
	printf("排序成功!!!\n");
	return 0;
}
int SaveContact(contact_p cp)
{
	FILE* fp = fopen("SAVE_FILE", "wb");//写入
	if (fp == NULL)
	{
		printf("打开文件失败!!!\n");
		return 0;
	}
	fwrite(cp, sizeof(contact_t), 1, fp);
	fwrite(cp->person, sizeof(person_t), cp->size, fp);
	fclose(fp);
	printf("保存联系人成功!!!\n");
	return 0;
}
#include"contact.h"
int main()
{
	char name_user[32];
	char passwd_user[32];
	int count = 3;
	while (count > 0)
	{
		count--;
		printf("你正在访问通讯录\n");
		printf("\n");
		printf("请输入你的通讯录用户名#:");
		scanf("%s", name_user);
		printf("\n");
		printf("请输入你的通讯录密码#:");
		scanf("%s", passwd_user);
		printf("\n");
		if (strcmp(USER, name_user) == 0 && strcmp(PASSWD, passwd_user) == 0)
		{
			printf("用户名和密码输入正确，你可以访问通讯录了!!!\n");
			break;
		}
		printf("用户名和密码输入错误,你还有%d次机会可输入用户名和密码\n", count);
		printf("\n");
		if (count == 0)
		{
			return 0;
		}
	}
	contact_p contact = NULL;//contact_p是一个结构体指针，在这里定义了一个结构体指针contact
	InitContact(&contact);
	int quit = 0;
	int select = 0;
	Menu();
	while (!quit)
	{
		printf("请输入你想进行的操作\n");
		scanf("%d", &select);
		switch (select)
		{
		case 1:
			AddPersonToContact(&contact);
			break;
		case 2:
			DelPersonToContact(contact);
			break;
		case 3:
			ChangePersonFromContact(contact);
			break;
		case 4:
			CheckPersonFromContact(contact);
			break;
		case 5:
			ShowPersonFromContact(contact);
			break;
		case 6:
			EmptyPersonFromContact(contact);
			break;
		case 7:
			SortPersonFromContact(contact);
			break;
		case 8:
			SaveContact(contact);
			break;
		case 9:
			quit = 1;
			break;
		}
	}
	system("pause");
	return 0;
}
